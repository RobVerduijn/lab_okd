- name: Setup ocp configuration
  hosts: localhost
  connection: local
  become: false
  gather_facts: false

  tasks:
    - name: Ensure ssh pub key is set
      ansible.builtin.set_fact:
        ansible_ssh_private_key_file: "{{ lookup('ansible.builtin.env', 'HOME') + '/.ssh/id_rsa' }}"

    - name: Fail if not set properly
      ansible.builtin.assert:
        that:
          - warning is not defined
        fail_msg: You did not specify the correct inventory subdir.

    - name: Assert that cluster is set
      ansible.builtin.assert:
        that:
          cluster is defined
        fail_msg: Cluster is not set, did you specify the inventory ?

    - name: Add localhost to all and {{ cluster }}
      ansible.builtin.add_host:
        name: localhost
        groups:
          - all
          - "{{ cluster }}"
        ansible_user: "{{ lookup('ansible.builtin.env', 'USER') }}"
        ansible_connection: local

    - name: Check init settings and vm's
      ansible.builtin.include_role:
        name: prepare

    - name: Clean the cluster nodes from the known_hosts
      ansible.builtin.include_role:
        name: lab
        tasks_from: clean
      vars:
        lab_infra: "{{ ocp_infra }}"

    - name: Start the cluster nodes
      ansible.builtin.include_role:
        name: lab
        tasks_from: start_vm
      loop: "{{ groups['bootstrap'] + groups['masters'] + groups['workers'] }}"
      loop_control:
        loop_var: host
      when: hostvars[host]['virtual']
      vars:
        lab_infra: "{{ ocp_infra }}"
        lab_start_vm_name: "{{ host }}"

- name: Ensure bootstrap is started
  hosts: bootstrap
  gather_facts: false

  tasks:
    - name: Ensure ssh pub key is set
      ansible.builtin.set_fact:
        ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file | default(lookup('ansible.builtin.env', 'HOME') + '/.ssh/id_rsa') }}"
      delegate_to: localhost

    - name: Wait for the bootstrap to be up and running
      ansible.builtin.wait_for_connection:
        sleep: 10

- name: Wipe the nodes
  hosts: bootstrap,masters,workers
  gather_facts: false
  become: true

  tasks:
    - name: Ensure ssh pub key is set
      ansible.builtin.set_fact:
        ansible_ssh_private_key_file: "{{ ansible_ssh_private_key_file | default(lookup('ansible.builtin.env', 'HOME') + '/.ssh/id_rsa') }}"
      delegate_to: localhost

    - name: Only run wipe when asked
      when: wipe | default(false) | bool
      block:
        - name: Wipe sdb drive of the workers
          ansible.builtin.shell: >-
            dd if=/dev/zero of=/dev/{{ storage_dev | default('sdb') }} bs=1M count=100
          when: inventory_hostname in groups['workers']
          tags: skip_ansible_lint

        - name: Wipe and reboot all nodes
          ansible.builtin.shell: |
            dd if=/dev/zero of=/dev/{{ system_dev | default('sda') }} bs=1M count=1 && reboot -f
          ignore_errors: true
          async: 10
          poll: 0
          tags: skip_ansible_lint

        - name: Clean the old ssh fingerprints from known_hosts
          ansible.builtin.include_role:
            name: lab
            tasks_from: clean
          vars:
            lab_infra: "{{ ocp_infra }}"
          run_once: true
          tags: skip_ansible_lint

- name: Ensure bootstrap is ready
  hosts: bootstrap
  gather_facts: false

  tasks:
    - name: Wait for the bootstrap to be up and running
      ansible.builtin.wait_for_connection:
        sleep: 10
      delay: 10
      retries: 60

- name: Ensure masters are ready
  hosts: masters
  gather_facts: false

  tasks:
    - name: Wait for the master node to be up and running
      ansible.builtin.wait_for_connection:
        sleep: 10
      delay: 10
      retries: 60

- name: Ensure workers are ready
  hosts: workers
  gather_facts: false

  tasks:
    - name: Wait for the node to be up and running
      ansible.builtin.wait_for_connection:
        sleep: 10
      delay: 10
      retries: 120

- name: Wait for nodes to be ready
  hosts: localhost
  connection: local
  become: false
  gather_facts: false

  tasks:
    - name: Wait for workers to be ready as nodes
      ansible.builtin.shell: |
        oc get csr -o json | jq -r '.items[] | select(.status.certificate == null) | .metadata.name' | xargs -I % oc adm certificate approve % > /dev/null
        oc get nodes -l node-role.kubernetes.io/worker -o json | jq -r '.items[].status.conditions[] | select(.reason == "KubeletReady") | .type'
      register: crs_workers
      until: crs_workers['stdout_lines'] | default([]) | unique | length == 1
      args:
        chdir: "{{ ocp_assetsdir }}"
      tags: skip_ansible_lint
      delay: 10
      retries: 120
      environment:
        KUBECONFIG: "{{ ocp_assetsdir }}/auth/kubeconfig"

    - name: Wait for install to be done
      ansible.builtin.shell: "{{ ocp_assetsdir }}/openshift-install wait-for install-complete"
      register: openshift_install
      args:
        chdir: "{{ ocp_assetsdir }}"
      tags: skip_ansible_lint
      environment:
        KUBECONFIG: "{{ ocp_assetsdir }}/auth/kubeconfig"

    - name: Results
      ansible.builtin.debug:
        var: openshift_install

- name: Configure the haproxy system
  hosts: loadbalancer
  gather_facts: true
  become: true

  tasks:
    - name: Ensure bootstrap is set
      ansible.builtin.set_fact:
        enable_bootstrap: "{{ enable_bootstrap | default(false) }}"

    - name: Show what bootstrap is set to
      ansible.builtin.debug:
        msg: "enable_bootstrap is set to {{ enable_bootstrap | string }}"

    - name: Gather package facts
      ansible.builtin.package_facts:

    - name: Include variables for haproxy
      ansible.builtin.group_by:
        key: haproxy

    - name: Configure haproxy
      ansible.builtin.include_role:
        name: ocp_lb
      vars:
        ocp_lb_enable_bootstrap: "{{ enable_bootstrap }}"
