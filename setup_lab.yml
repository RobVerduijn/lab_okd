- name: Configure the bastion system
  hosts: localhost
  gather_facts: false
  become: false

  tasks:
    - name: Check if vm's are present
      ansible.builtin.include_role:
        name: ocp_infra
        tasks_from: check_vm.yml

    - name: Init all
      ansible.builtin.set_fact:
        init_svc: true
        init_lb: true
        init_cluster: true
      when: init_all | default('false') | bool

    - name: Ensure cluster is set
      ansible.builtin.set_fact:
        cluster: "{{ cluster | default('ocp_local') }}"

    - name: Load vars from group {{ cluster }}
      ansible.builtin.group_by:
        key: "{{ cluster }}"

    - name: Ensure init cluster is set
      ansible.builtin.set_fact:
        init_cluster: "{{ init_cluster | default(false) }}"

    - name: Warn about cluster init
      when: init_cluster | default(false) | bool
      ansible.builtin.pause:
        prompt: |-
          Reinitializing cluster: {{ cluster }}
          This means all systems from this cluster will be wiped

    - name: Clean up the lab
      ansible.builtin.include_role:
        name: lab
      when: (init_svc | default(false) | bool) or (init_lb | default(false) | bool) or (init_cluster | default(false) | bool)

    - name: Create vm's
      ansible.builtin.include_role:
        name: ocp_infra

- name: Configure svc host
  hosts: svc
  gather_facts: false
  become: false
  remote_user: root

  tasks:
    - name: Start svc vm
      community.libvirt.virt:
        name: "svc"
        state: running
      delegate_to: localhost

    - name: Wait for system to become reachable
      ansible.builtin.wait_for_connection:

    - name: Gather facts
      ansible.builtin.setup:

    - name: Setup the services on the svc vm
      ansible.builtin.include_role:
        name: ocp_svc

- name: Configure loadbalancer host
  hosts: loadbalancer
  gather_facts: false
  become: false
  remote_user: root

  tasks:
    - name: Ensure enable bootstrap is set
      ansible.builtin.set_fact:
        enable_bootstrap: "{{ hostvars['localhost']['init_cluster'] | default(false) }}"

    - name: Start svc vm
      community.libvirt.virt:
        name: "svc"
        state: running
      delegate_to: localhost

    - name: Wait for system to become reachable
      ansible.builtin.wait_for_connection:

    - name: Ensure cluster is set
      ansible.builtin.set_fact:
        cluster: "{{ cluster | default('ocp_local') }}"

    - name: Load vars from group {{ cluster }}
      ansible.builtin.group_by:
        key: "{{ cluster }}"

    - name: Setup loadbalancer
      ansible.builtin.include_role:
        name: ocp_lb

- name: Apply personal preferences
  hosts: loadbalancer,svc
  gather_facts: false
  become: false
  remote_user: root

  tasks:
    - name: Ensure the package facts are loaded
      ansible.builtin.package_facts:
      when: ansible_facts['packages'] is not defined

    - name: Install the packages that I like
      ansible.builtin.dnf:
        name: "{{ my_preferred_packages }}"
        state: present
      when: "my_preferred_packages | difference(ansible_facts['packages']) | length > 0"

    - name: Update systems
      ansible.builtin.dnf:
        name: "{{ my_preferred_packages }}"
        state: present

    - name: Check if system needs restarting
      ansible.builtin.command: needs-restarting -r
      register: needs_restarting
      changed_when: false | bool
      failed_when: needs_restarting['rc'] > 1

    - name: Restart machine {{ inventory_hostname }}
      ansible.builtin.reboot:
      when: needs_restarting['rc'] | default(0) == 1

#    - name: The status of mirror installation is
#      ansible.builtin.debug:
#        msg: Mirroring of the registry will {{ ocp_local_registry | default(false) | ternary("", "NOT!!") }} be performed

#    - name: Install ocp client
#      ansible.builtin.include_role:
#        name: ocp_client
#
#    - name: Setup pxe content
#      ansible.builtin.include_role:
#        name: ocp_pxe_content
#
#    - name: Create ocp image mirror script and secret
#      ansible.builtin.include_role:
#        name: ocp_mirror
#      when: ocp_local_registry | default(false)
#
#    - name: Create ocp ignition files
#      ansible.builtin.include_role:
#        name: ocp_ignition_files
#
#    - name: Create virtual machines
#      ansible.builtin.include_role:
#        name: ocp_vm
