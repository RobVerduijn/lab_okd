- name: Setup ocp configuration
  hosts: localhost
  connection: local
  become: false
  gather_facts: false

  tasks:
    - name: Assert that cluster is set
      ansible.builtin.assert:
        that:
          cluster is defined
        fail_msg: Cluster is not set, did you specify the inventory ?

    - name: Add localhost to all and {{ cluster }}
      ansible.builtin.add_host:
        name: localhost
        groups:
          - all
          - "{{ cluster }}"
        ansible_user: "{{ lookup('ansible.builtin.env', 'USER') }}"
        ansible_connection: local

    - name: Check init settings and vm's
      ansible.builtin.include_role:
        name: prepare

- name: Wipe the nodes
  hosts: bootstrap,masters,workers
  gather_facts: false
  become: true

  tasks:
    - name: Only run when asked
      when: wipe | default(false) | bool
      block:
        - name: Wipe sdb drive of the workers
          ansible.builtin.shell: >-
            dd if=/dev/zero of=/dev/sdb bs=1M count=100
          when: inventory_hostname in groups['workers']
          tags: skip_ansible_lint

        - name: Wipe and reboot all nodes
          ansible.builtin.shell: |
            dd if=/dev/zero of=/dev/sda bs=1M count=1 && reboot -f
          ignore_errors: true
          async: 10
          poll: 0
          tags: skip_ansible_lint

        - name: Clean the old ssh fingerprints from known_hosts
          ansible.builtin.include_role:
            name: lab
            tasks_from: clean
          vars:
            lab_infra: "{{ ocp_infra }}"
          run_once: true
          tags: skip_ansible_lint

- name: Ensure bootstrap is ready
  hosts: bootstrap
  gather_facts: false

  tasks:
    - name: Ensure ssh pub key is set
      ansible.builtin.set_fact:
        ocp_ignition_core_ssh_key: "{{ ocp_ignition_core_ssh_key | default(lookup('file', lookup('ansible.builtin.env', 'HOME') + '/.ssh/id_rsa.pub')) }}"

    - name: Wait for the bootstrap to be up and running
      ansible.builtin.wait_for_connection:
        sleep: 10

    - name: Check if the bootstrap has pivotted to scos
      ansible.builtin.slurp:
        src: /etc/redhat-release
      register: coreos_release
      until: coreos_release['content'] | b64decode | regex_search('CentOS Stream CoreOS') == "CentOS Stream CoreOS"
      delay: 10
      retries: 60

- name: Ensure masters are ready
  hosts: masters
  gather_facts: false

  tasks:
    - name: Ensure ssh pub key is set
      ansible.builtin.set_fact:
        ocp_ignition_core_ssh_key: "{{ ocp_ignition_core_ssh_key | default(lookup('file', lookup('ansible.builtin.env', 'HOME') + '/.ssh/id_rsa.pub')) }}"

    - name: Wait for the master node to be up and running
      ansible.builtin.wait_for_connection:
        sleep: 10

    - name: Check if the master node has pivotted to scos
      ansible.builtin.slurp:
        src: /etc/redhat-release
      register: coreos_release
      until: coreos_release['content'] | b64decode | regex_search('CentOS Stream CoreOS') == "CentOS Stream CoreOS"
      delay: 10
      retries: 60

- name: Ensure workers are ready
  hosts: workers
  gather_facts: false

  tasks:
    - name: Ensure ssh pub key is set
      ansible.builtin.set_fact:
        ocp_ignition_core_ssh_key: "{{ ocp_ignition_core_ssh_key | default(lookup('file', lookup('ansible.builtin.env', 'HOME') + '/.ssh/id_rsa.pub')) }}"

    - name: Wait for the node to be up and running
      ansible.builtin.wait_for_connection:
        sleep: 10

    - name: Check if the node has pivotted to scos
      ansible.builtin.slurp:
        src: /etc/redhat-release
      register: coreos_release
      until: coreos_release['content'] | b64decode | regex_search('CentOS Stream CoreOS') == "CentOS Stream CoreOS"
      delay: 10
      retries: 120

- name: Setup ocp configuration
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  environment:
    KUBECONFIG: "{{ ocp_assetsdir }}/auth/kubeconfig"
  tasks:
    - name: Wait for workers to be ready as nodes
      ansible.builtin.shell: |
        oc get csr -o json | jq -r '.items[] | select(.status.certificate == null) | .metadata.name' | xargs -I % oc adm certificate approve % > /dev/null
        oc get nodes -l node-role.kubernetes.io/worker -o json | jq -r '.items[].status.conditions[] | select(.reason == "KubeletReady") | .type'
      register: crs_workers
      until: crs_workers['stdout_lines'] | default([]) | unique | length == 1
      args:
        chdir: "{{ ocp_assetsdir }}"
      tags: skip_ansible_lint
      delay: 10
      retries: 120
